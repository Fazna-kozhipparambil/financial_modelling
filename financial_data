import streamlit as st
import plotly.graph_objects as go
import pandas as pd
import requests

# Define constants
api_key = 'cXDEpYQpwZGGFebmvqAPfdP18R3paFfg'
base_url = 'https://financialmodelingprep.com/api/v3/'

# Function to get stock data
def get_stock_data(symbol, api_key):
    url = f"{base_url}historical-price-full/{symbol}?apikey={api_key}"
    response = requests.get(url)
    data = response.json()
    return pd.DataFrame(data['historical'])

# Function to calculate indicators
def calculate_indicators(df):
    df['SMA_20'] = df['close'].rolling(window=20).mean()
    df['SMA_50'] = df['close'].rolling(window=50).mean()
    df['EMA_20'] = df['close'].ewm(span=20, adjust=False).mean()
    df['EMA_50'] = df['close'].ewm(span=50, adjust=False).mean()
    
    delta = df['close'].diff()
    gain = (delta.where(delta > 0, 0)).rolling(window=14).mean()
    loss = (-delta.where(delta < 0, 0)).rolling(window=14).mean()
    rs = gain / loss
    df['RSI'] = 100 - (100 / (1 + rs))
    
    return df

# Function to generate signals
def generate_signals(df):
    df['Signal'] = 0
    df['Signal'][df['SMA_20'] > df['SMA_50']] = 1  # Buy signal
    df['Signal'][df['SMA_20'] < df['SMA_50']] = -1  # Sell signal
    df['Position'] = df['Signal'].diff()
    return df

# Function to plot stock data
def plot_stock_data_streamlit(df, symbol):
    fig = go.Figure()
    
    fig.add_trace(go.Scatter(x=df['date'], y=df['close'], mode='lines', name='Close Price'))
    fig.add_trace(go.Scatter(x=df['date'], y=df['SMA_20'], mode='lines', name='SMA 20'))
    fig.add_trace(go.Scatter(x=df['date'], y=df['SMA_50'], mode='lines', name='SMA 50'))
    
    buy_signals = df[df['Position'] == 1]
    sell_signals = df[df['Position'] == -1]
    fig.add_trace(go.Scatter(x=buy_signals['date'], y=buy_signals['close'], mode='markers', marker=dict(color='green', symbol='triangle-up'), name='Buy Signal'))
    fig.add_trace(go.Scatter(x=sell_signals['date'], y=sell_signals['close'], mode='markers', marker=dict(color='red', symbol='triangle-down'), name='Sell Signal'))
    
    fig.update_layout(title=f'{symbol} Stock Price and Signals', xaxis_title='Date', yaxis_title='Price')
    return fig

# Streamlit app
st.title('Stock Analysis Dashboard')

symbols = ['GOOGL', 'META', 'MSFT', 'AAPL']
symbol = st.selectbox('Select a stock', symbols)

df = get_stock_data(symbol, api_key)
df = calculate_indicators(df)
df = generate_signals(df)

fig = plot_stock_data_streamlit(df, symbol)
st.plotly_chart(fig)

